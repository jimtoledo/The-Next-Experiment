pico-8 cartridge // http://www.pico-8.com
version 18
__lua__
--instance variables etc

function _init()

	ticker = 0
	battle_checked = false
	in_battle = false

	select = 3
	selected = false
	selection = 0
	in_attack_menu = false
	basic_menu = {"  fight","  pkmn","  item","  run"}
	attack_menu = {"  scratch","  ","  ","  "}
	menu = basic_menu
	transitioning = false
	t_timer = 0

	sprites = {
		pleft = 0,
		pup = 2,
		pdown = 4,
		pidgey = 32,
		rattata = 36,
		shadow = 128,
		grass = 15,
		level = 58,
		pball_full = 59,
		pball_empty = 60,
		trainer_head = 98,
		char_back = 102, 
		pidg_back = 105,
		ratt_back = 108,
		hp = 72, -- height 1, width 2
		hp_bar_full = 74,
		hp_bar_empty = 90,
		hp_end = 75,
		menu_corner = 76,
		menu_horiz = 77,
		menu_vert = 92,
		out_bar_vert = 88,
		out_bar_horiz = 91,
		out_bar_corner = 78,
		out_bar_end = 94
		}

	player = {
		w = 16,
		h = 16,	
		jumping = false,
		moving = false,
		direction = "",
		move_counter = 0,
		still = true,
		y_flip = false,
		left = 0,
		back = 4,
		down = 8,
		sprite = 8,
		anim_jump = 2,
		in_grass = false,
		x = 128,
		y = 48,
		cycle = 0,
		flip = false
		}
		
		--pokemon & party 
		char = makestart()
		party = {char}
		
		-- for battle n stuff 
		dialog = {
			text = nil ,
			battle = nil,
		}
end


-->8
--draw and update functions
--map cutting off at the end
--map function
--draw new map below old map
map_x=0
map_y=0
map_w=368
map_h=288


--update and draw methods

function overworld_draw()
	palt(2,true)
	palt(0,false)
	cls()
 camera(-56+player.x,-56+player.y)
	map(map_x,map_y,0,0,map_w,map_h)
	map(48,0,0,map_h,map_w,map_h)
	
	if player.jumping then
		sh_y+=.75
		spr(sprites.shadow, player.x, sh_y,2,1)
	end
	
	if player.in_grass then
		draw_in_grass()
	else
		spr(player.sprite + 2*player.cycle,player.x,player.y,2,2,player.flip)
	end
	palt()
	
	if in_battle then
		print("battle", player.x - 20, player.y -20, 3)
	end
	print(player.x, player.x-32,player.y-40,2)
	print(player.y, player.x-32,player.y-30,2)
end

function draw_enemy(name,leftx,rightx,upy,downy)
	enemy_sprite = 0
	if name == "rattata" then
		enemy_sprite = sprites.rattata
	else 
		enemy_sprite = sprites.pidgey
	end
	spr(enemy_sprite,rightx-40,upy+24,4,4)
	print(" "..name,leftx+8,upy,0)
	spr(sprites.level,leftx+24,upy+6)
	print("4",leftx+32,upy+8,0)

	--draw the hp bar
	spr(sprites.hp,leftx+16,upy+14,2,1)
	local i = 0
	while i < 4 do
		spr(sprites.hp_bar_full,leftx+32+i*8,upy+14)
		i += 1
	end
	spr(sprites.hp_end,leftx+64,upy+14)
	
	--draw outer bar
	spr(sprites.out_bar_vert,leftx+8,upy+14)
	spr(sprites.out_bar_corner,leftx+8,upy+22)
	i = 0
	while i < 6 do
		spr(sprites.out_bar_horiz,leftx+16+i*8,upy+22)
		i+=1
	end
	spr(sprites.out_bar_end,leftx+64,upy+22)
end

function draw_ally(name, leftx, rightx, upy, downy)
	
	local sx = 0
	local sy = 48
	local sw = 0
	local sh = 16
	
	sprite = 0
	if name == "pidgey" then
		sx = 72
		sw = 24
	elseif name == "rattata" then
		sx = 96
		sw = 16
	elseif name == "charmander" then
		sx = 48
		sw = 24
	end
	
	print(name, leftx+64, upy+60)
	spr(sprites.level, leftx+80,upy+66)
	--actual level of pokemon
	print("7",leftx+88,upy+68)
	spr(sprites.hp,leftx+64,upy+74,2,1)
	local i = 0
	while i < 5 do
		spr(sprites.hp_bar_full,leftx+80+i*8,upy+74)
		i += 1
	end
	spr(sprites.hp_end,leftx+120,upy+74)
	
	--health - will need to be updated
	print("43/43",leftx+72,upy+82)
	
	--draw outer line
	spr(sprites.out_bar_vert,leftx+124,upy+74,1,1,true)
	spr(sprites.out_bar_vert,leftx+124,upy+82,1,1,true)
	spr(sprites.out_bar_corner,leftx+124,upy+90,1,1,true)
	i = 0
	while i < 7 do
		spr(sprites.out_bar_horiz,leftx+116-i*8,upy+90)
		i+=1
	end
	spr(sprites.out_bar_end,leftx+60,upy+90,1,1,true)
	
	sspr(sx,sy,sw,sh,leftx+12,upy+64,sw*2,sh*2)
	
end

function draw_b_outline(leftx, rightx, upy, downy)
	--left-edge
	
	spr(sprites.menu_corner,leftx+8,upy+96)
	spr(sprites.menu_vert,leftx+8,upy+104)
	spr(sprites.menu_vert,leftx+8,upy+112)
	spr(sprites.menu_corner,leftx+8,upy+120,1,1,false,true)
	
	--right edge
	
	spr(sprites.menu_corner,rightx-8,upy+96,1,1,true)
	spr(sprites.menu_vert,rightx-8,upy+104,1,1,true)
	spr(sprites.menu_vert,rightx-8,upy+112,1,1,true)
	spr(sprites.menu_corner,rightx-8,upy+120,1,1,true,true)
	
	--upper line
	local i = 0
	while i < 14 do
		spr(sprites.menu_horiz,leftx+16+i*8,upy+96)
		i+=1
	end
	
	--lower line
	i = 0
	while i < 14 do
		spr(sprites.menu_horiz,leftx+16+i*8,upy+120,1,1,false,true)
		i+=1
	end
	
	--line in middle for actual menu
	spr(sprites.menu_corner,leftx+56,upy+96)
	spr(sprites.menu_vert,leftx+56,upy+104)
	spr(sprites.menu_vert,leftx+56,upy+112)
	spr(sprites.menu_corner,leftx+56,upy+120,1,1,false,true)
	
end

function draw_menu(x,y)
	if in_attack_menu then
		menu = attack_menu
	else
		menu = basic_menu
	end
	
	t1 = menu[1]
	t2 = menu[2]
	t3 = menu[3]
	t4 = menu[4]
	if select == 1 then
		t1 = "➡️"..sub(t1,3)
	elseif select == 2 then
		t2 = "➡️"..sub(t2,3)
	elseif select == 3 then
		t3 = "➡️"..sub(t3,3)
	else
		t4 = "➡️"..sub(t4,3)
	end	
	
	print(t1,x,y,0)
	print(t2,x+35,y,0)
	print(t3,x,y+12,0)
	print(t4,x+35,y+12,0)
end

function transition_draw()
	palt(2,true)
	palt(0,false)
	leftx = player.x-64
	upy = player.y-56
	rightx = player.x+72
	downy = player.y + 72
end
	
	
function battle_draw()
	palt(2,true)
	palt(0,false)
	leftx = player.x-64
	upy = player.y-56
	rightx = player.x+72
	downy = player.y + 72
	rectfill(leftx,upy,rightx,downy,7)
	
	
	draw_enemy("pidgey",leftx,rightx,upy,downy)
	draw_ally("charmander",leftx,rightx,upy,downy)
	draw_b_outline(leftx,rightx,upy,downy)
	draw_menu(leftx+64,upy+104)
end

function transition(x,y)
	local i = 0
	if t_timer <= 32 then
		while i < 4 do
			line(x+t_timer*4+i,y,x+128-t_timer*4-i,y+128,0)
			i+=1
		end
	else
		while i < 4 do
			line(x,y+256-t_timer*4-i,x+128,y+t_timer*4+i-128,0)
			i+=1
		end
	end
end

function game_state(y)
	if y<=0 then
		cls()
		print("you've completed route 1",120,5,7)
	end

end

function _draw()
	
	if not in_battle and not transitioning then
		overworld_draw()
		game_state(player.y)
	elseif in_battle and not transitioning then
		battle_draw()
	else
		transition(player.x-56,player.y-56)
	end	
	
end

function _update()
	if not in_battle then
		player_overworld_update()
	else
		player_battle_update()
	end
end
-->8
--player functions

function player_overworld_update()
	
	if player.moving then
	player.in_grass = false
		if player.move_counter < 16 then
			if player.jumping then
				if player.move_counter % 4 == 0 then
					player.cycle += 1
					if player.cycle > 1 then
						player.cycle = 0
					end	
				end
				if player.move_counter < 4 then
					player.y -= 1
				else
					player.y+=3
				--	if player.y > y_start + 32 then
				--		player.y = y_start + 32
					--end
				end
			else
				move(player.direction)
			end
		player.move_counter +=1
		else
			player.moving = false
			player.jumping = false
		end
	else
		y_start = player.y
		if btn(0) then
			player.moving = true
			player.direction = "left"
			player.move_counter = 0
			player.sprite = player.left
			player.flip = false
		elseif btn(1) then
			player.moving = true
			player.direction = "right"
			player.move_counter = 0
			player.sprite = player.left
			player.flip = true
		elseif btn(2) then
			player.moving = true
			player.direction = "up"
			player.move_counter = 0
			player.sprite = player.back
		elseif btn(3) then
			player.moving = true
			player.direction = "down"
			player.move_counter = 0
			player.sprite = player.down
			jump_check()
		else
			player.cycle = 0
			fix_coord()
		end
		
		if collide_map(player,"center",6) then
			player.in_grass = true
		else
			player.in_grass = false
		end
		
	end
	ticker+=1
	
	if not battle_checked then
		if player.in_grass then
			in_battle = check_battle()
			battle_checked = true
		end
	end
	
end

function move(direction)
	battle_checked = false
	if direction == "left" then
		if not collide_map(player,"left",0) then
			player.x -= 1
		end
	elseif direction == "right" then
		if not collide_map(player,"right",0) then
			player.x += 1
		end
	elseif direction == "up" then
		if not collide_map(player,"up",0) then
			if player.y_flip then
				player.flip = true
			else
				player.flip = false
			end
			player.y -= 1
		end
	elseif direction == "down" then
		if not collide_map(player,"down",0) then
			if player.y_flip then
				player.flip = true
			else
				player.flip = false
			end
			player.y += 1
		end
	end
	
	if ticker%4 == 0 then
		ticker = 0
		player.cycle += 1
		if player.cycle == 2 then
			player.cycle = 0
			if player.y_flip then
				player.y_flip = false
			else
				player.y_flip = true
			end
		end
	end
end

--battle functions

function use_menu()	
	if btn(0) then
		if not (select % 2 == 1) then
			select-=1
		end
	elseif btn(1) then
		if not (select % 2 == 0) then
			select +=1
		end
	elseif btn(2) then
		if select > 2 then
			select -= 2
		end
	elseif btn(3) then
		if select <= 2 then
			select +=2
		end
	elseif btnp(4) then
		in_attack_menu = false
	elseif btnp(5) then
		selected = true
		selection = select
	end
end


function selection_check()
	if selected then
		selected = false
		if in_attack_menu then
			--will have to put in code
			--to get selected attack 
			--and do it here
			in_attack_menu = false
		else
			--selection 1 is attack
			if selection == 1 then
				in_attack_menu = true
			end
		end
	end
end



function player_battle_update()
	use_menu()
	selection_check()
	
	if transitioning then
		t_timer += 1
		if t_timer > 64 then
			transitioning = false
		end
	else
		t_timer = 0
	end
end
-->8
--collisions

function collide_map(obj,aim,flag)
	--obj = table x,y,w,h
	--ain = left,right,up,down
	
	local x=obj.x local y=obj.y
	local w=obj.w local h=obj.h

	local x1=0 local y1=0
	local x2=0 local y2=0
	
	if aim=="left" then
		x1=x-1 y1=y
		x2=x y2=y+h-1
		
	elseif aim=="right" then 
		x1=x+w y1=y
		x2=x+w y2=y+h-1
	
	elseif aim=="up" then
		x1=x+1  y1=y-1
		x2=x+w-1 y2=y
	
	elseif aim=="down" then 
		x1=x  y1=y+h
	 x2=x+w-1 y2=y+h
	 
	elseif aim == "center" then
		x1 = x y1 = y
		x2 = x y2 = y
	end
	
	--pixels to tiles
	
	x1/=8  x2/=8
	y1/=8  y2/=8
	
	
	if fget(mget(x1,y1),flag)
	or fget(mget(x1,y2),flag)
	or fget(mget(x2,y1),flag)
	or fget(mget(x2,y2),flag) then
		if aim=="down" and flag == 7 then
			if not player.jumping then
				player.jumping = true
				player.jump_start_y = player.y
				sh_y = player.y+20
			end
			return false
		end
		return true
	end
	
end

function jump_check()
	check_y = player.y + 24
	check_x = player.x
	if fget(mget(check_x/8,check_y/8),7) then
		player.jumping = true
		player.jump_start_y = player.y
		sh_y = player.y+20
	end
end
-->8
--misc functions

function draw_in_grass()
	tile_x = player.x
	tile_y = player.y
	palt(7,true)
	
	spr(sprites.grass,tile_x,tile_y,1,1)
	spr(sprites.grass,tile_x+8,tile_y,1,1)
	spr(player.sprite + 2*player.cycle,player.x,player.y,2,2,player.flip)
	spr(sprites.grass,tile_x,tile_y+8,1,1)
	spr(sprites.grass,tile_x+8,tile_y+8,1,1)

end

function fix_coord()
	if not (player.x%16 == 0)then
	 if player.x % 16 > 8 then
	 	player.x = player.x + (16-player.x%16)
	 else
	 	player.x = player.x - player.x%16
	 end
	end
	if not (player.y % 16 == 0) then
	 if player.y % 16 > 8 then
	 	player.x = player.y + (16-player.y%16)
	 else
	 	player.x = player.y - player.y%16
		end
	end
end

function check_battle()
	--when in grass, odds are 1/18.75 for battle
	random = flr(rnd(1876))
	if random < 100 then
		transitioning = true
		return true
	else
		return false
	end
end
-->8
-- pokemon & stats

-- true and false to save space
f = false 
t = true 

newpok = function (name, lvl,xp,chp, hp,
attk, def, spd, spc, sp, spe)
	return {
		name = name,
		lvl = lvl, -- current lvl
		xp = xp,   -- xp 
		hp = hp,   -- total health
		chp = chp, -- current hp 
		atk = atk, -- attack 
		def = def, -- def 
		spd = spd, -- speed
		spc = spc, -- specail
		fnt = f,   -- is it fainted?  
		moves = {},
		types = {}
		}
end

--moves 

-- tackle 
tkle = {
	nme = "tackle",
	dmg = 35,  -- damage
	pp  = 35,  -- uses  
	acc = 100, -- accuracy
	typ = "normal" -- type
}
-- scratch 
scrt = {
	nme = "scratch", 
	dmg = 40, 
	acc = 100,
	typ = "normal",
} 

-- ember 
emb = {
	nme = "ember",
	dmg = "40",
	pp  = "25",
	acc = "100",
	typ = "fire"
}



-- levels 1-20
xpchart = {		
	0,25,50,100,150,
	200,400,600,800,1000,
	1500,2000,3000,
	4000,5000,6000,
	7000,8000,9000,10000, 
}

-- starter pokemon
function makestart()
	char = newpok("charmander",5,0,39,39,52,43,65,50)
	char.moves = {scrt,"growl"}
	
	char.types = {"fire"}
	char.xp = xpchart[char.lvl]
	return char
end
 
-- pidgey
function makepid()
	pid= newpok("pidgey",flr(rnd(4))+2,0,40,40,45,40,56,35)
 
 if pid.lvl == 5 then 
		pid.moves={"gust","growl"}
 else 
		pid.moves={"gust"}
	end 
	
	pid.types = {"normal","flying"}
	pid.xp = xpchart[pid.lvl]
	return pid
end

-- ratatta
function makerat()
	rat = newpok("rattata",flr(rnd(3))+2,0,30, 30,56,35,72,25)
	rat.moves={tkle, "tail whip"}
	
	rat.types = {"normal"}
	rat.xp = xpchart[rat.lvl]
	return rat
end 
 

 	


-->8
-- encounters and battle 
-- ratata 45% pidgey 65%


-- in battle 

-- global var for not 

ecount = 0 

--damage p1 is attacking p2, the moves damage
function damage(p1,p2,move)
	print("work in progress")
	
	-- does not account for spc moves
 dam = (((2*p1.lvl)/5)*move.dmg*(p1.atk/p2.def))/50
 
 p2.chp -= dam
 
 move.pp -=1
 
 ecount = 0 
 
end 

-- function to check if pokemon is 
-- able to battle 
function isdead(p)
	if p.hp <= 0 then 
				p.fnt = t
	end 
end


-- adds xp to pokemon
function addxp(p)
	
	tonext = xpchart[p.lvl+1]
 p.xp = p.lvl^3
 
 if tonext < p.xp then
 	p.lvl += 1
 	print(p.name.." grew to level "..p.lvl.."!") 
 	
 	-- do math for stats here  
 end  
end 

-- heal all pokemon party 
function heal(party)

	for p in all(party) do 
		p.chp = p.hp
	end 
end


-- function to escape, need to add
-- an escape counter when in battle
function escape(p1,p2,ecount)
	
	b = (p2.spd/4)%256
	
	if b == 0 then 
		esc = t
	end 
	
	f = ((p1.spd * 32)/(b)+30) * ecount
	
	if f > 255 then 
		esc = t
	end 
	
	ran = rnd(255)
	
	if ran < f then 
		esc = t 
	else
		esc = f
		ecount+= 1 
	end 
	
	return esc
end 
-->8
--menus
__gfx__
22222000000222222222222222222222222220000002222222222000000222222222200000022222222220000002222277777700000777777777777777777756
22220dddddd02222222220000002222222220dddddd0222222220dddddd0222222220dddddd0222222220dddddd0222277770056665007777676777777777575
2220dddddddd022222220dddddd022222220dddddddd02222220dddddddd02222220dddddddd02222220dddddddd022277705677777650777676767655775665
22007ddddddd02222220dddddddd02222220dddddddd02222220dddddddd02222220dddddddd02222220dddddddd022277057777777775077777767657575656
207777ddddd0002222007ddddddd02222200dddddddd00222200dddddddd002222000d7777d0002222000d7777d0002277067777777776077777777757655557
2200ddd000000022207777ddddd0002222000dddddd0002222000dddddd000222200000000000022220000000000002277056677777665077767677775765567
22207077000000222200ddd000000022207000000000070220700000000007022070777777770702207077777777070277056566666565077767677766565577
22207077077002222220707700000022207700000000770220770000000077022077770770777702207777077077770276056557775565077777777776655677
22207777777022222220707707700222220077000077002220007700007700222200770770770022200077077077002266066557775566076676767656500656
22220d77700d02222220777777702222220000dddd000022207000dddd0000222200077dd77000222070077dd770d02265066667776666076767776750577075
2222200000dd022222220d77700d022220700d0000d0070222000d0000d077022077000000007702220000000000702265056667776665077677766605777750
22222200770d022222222000000d022220700dd77dd0070222200dd77dd07702207700000000770222200d000077002265056557775565076767666706577750
22222200770d02222220000007700222220000dddd000022222200dddd00002222000dd00dd000222222000dd077022275506557775560577676667660557560
222220dd00002222220dd0dd0770d0222220d0000006022222220d00002222222220d00dd00d022222220dd00200222276550057775005776767677600555606
222220dddd0222222220dd00000dd0222220ddd00ddd022222222000222222222220ddd00ddd0222222220002222222277655500000557777776776665005500
22222200002222222222000222200222222200022000222222222222222222222222000220002222222222222222222277766655555777776766666766600006
22222222222222222222222222222222257777777505222222222222222222226767600005767676065656500606060055555555555555557000000000000007
22222222222222222222222222222222577700056777005222222222222222227655067770056767707550577070505066666666666666667055000000055000
22222000000200222222222222222222567566660056777052222222222222226760677767006567775005776706050066767776667677767700777777700650
22220506550076002222222222222222206656666520056770522222222222227650777675705657775006575670605066666666666666667000000000000050
22220065507666650222222222222222225066666022220566702222222222226506676777070576756060557567050055555555555555550666666666666600
22200655066655002222222222222222222250055222222200660222222222227055656765505067560600555656005066666666666666660757777777557700
22006550000000022222222222222222222222222222222222066022222222226006565605050076550065005550600567776766677767660755757557557500
22005500055555502222222222222222222222222222222225500502222222227600666550600567000666600006065566666666666666660777777777777700
22200007000555550222222222222222222222222222222557777760222222226060565605050056777777777777777777777777677777760755777777575700
22200050500055555002222222222222222222650222225777777666022222220505656060505006777777777770007777666777777557770755757557575700
22076005000055555550022222222222222226776022207777666666602222220060505600050007777007777705550776777677775775770777777777777700
20766500070055555555500000002222222225666652076650056666602222225005050050000056707007777056555067777767657556567000000000000050
22005507770556555555506666500022222220666560056066660666665222226500000000000567777007777055555067777767757666577676777676650750
22070077705565555555000000066602222220665077760666570666660222225650000550005657707007777066666067777767575665757676776766550650
22077777775065555550666666655560222022500776666665670666660222226565505665056576777000077706660776777677755555577777777676550550
22077777777065555550566666500050220702066666656665775666666022227676650000566766777777777770007777666777677557767777777767665005
22067777777706555555000000066606222570666666075656756666666522227777777777777777777777777777777777007777777777777700777700000000
22207777777706555550566666665050222206666660770657706670666602227777777777777777777777777777777770700700000000007700777700000000
22207777777770555506666665000502222070766607070665066670566660220070700007777777000000000777777700000077777777777700777700000000
22206767677777005505550000000022222577777775557660006705055665220070700707077770555555555077777707777070000000007700077700000000
22220607607777760000005550002222222250007777775057770705205566520000700007777770555555555077777770770700000000007770000000000000
22220607660777766005555555002222222207770077777770007052220566520070700777077777000000000777777777007077777777777777000000000000
22222050766006666055555555022222222575776007775005667022222577657777777777777777777777777777777777070777777777777777777700000000
22222206000660000605555550022222222070750550777656660522222077757777777777777777777777777777777770707777777777777777777700000000
22222220677776666660555500222222222200000555077656660222220675757700777777777777777777777777777770707777777777777777777700000000
22220056067777777666000002222222222222550555076566666522220600527700777777777777777777777777777770707777777777777777777700000000
20006666600577776660000002222222222220665055070556666022222222227700777777777777000000007777777770707777777777770077777700000000
07700056555000000000666650222222222220666500706606666022222222227700777777777777777777777777777770707777777777770000777700000000
00005770000222006006665057022222222206666060022205666062222222227700777777777777777777770000000070707777777777770000007700000000
22207002222220770775052220022222222206775622222220766602222222227700777777777777000000000000000070707777777777770000000000000000
22200222222207007702222222222222222065750222222220575702222222227700777777777777777777777777777770707777777777777777777700000000
22222222222200250522222222222222222600002222222222000022222222227700777777777777777777777777777770707777777777777777777700000000
2222220000222222777777777777777700000055777777772222222225000005622222222222200222222222222222222002222222222222f0f0000000000000
22220066660022227777777777777777000000557777777722222222056666665022222222220670002222222222222207702222222222220000000000000000
2220666666660222777777777777000066666666000077772222222056776666650222222200056056022222222222220707022222222222f0f0000000000000
22066660666660227777777777770000666666660000777722222225677766666500222220666056056022222222222207707022222222220000000000000000
2206660706666022777777770000666666666666666600772222225667766666660022222055560060000222222222222077070222222222f0f0000000000000
22060007000060227777777700006666666666666666007722222206676666666655222222000055555500222222222222005070222222220000000000000000
2070777777770702777700005555556655666666666600772202020666666666666002222220556555500702022222222206607022222222f0f0000000000000
20767707707767027777000055555566556666666666007702000206666666666665502222220765555000706022222220665070222200220000000000000000
2200770770770022770055555555555566556666666666552076600666666666666667522220565555500750022222222065507022206502f0f0000000000000
22000776677000227700555555555555665566666666665520766055666666666656660222205555555505602222222222056070000657020000000000000000
2077000000007702005555555555555555665566666666002066505506666666055066022205555555555075022222222206607066665702f0f0000000000000
20770770077077020055555555555555556655666666660020555056066666650005560222055555555556702222222222066070666660220000000000000000
2200067777600022005555555555555566556655666666002205556656665550776005022205555555550670222222222206607066666022f0f0000000000000
22200000000002220055555555555555665566556666660022205660666665057760502220555555555550702222222222060706666666000000000000000000
2220760000670222005555555555555555555555555577772220666566666657766002222055555055555075222222222206070666667770f0f0000000000000
2222000bb00022220055555555555555555555555555777722066606666666677650222205555505555550722222222220207066666777020000000000000000
e1e1e1e1e1e1c0d0e1e1e1e1e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e1e1e1e1e1e1e1e1c0d0e1e1f0f0f0f0f0f00000e1e1e1e1e1e18292e1e1e1e1e1e1e1e1
e1e1c0d0f0f0f0f0c0d0e1e1e1e1e1e1e1e1e1e18292e1e1f0f0f0f0f0f000000000000000000000000000000000000000000000000000000000000000000000
e1e1e1e1e1e1c1d1e1e1e1e1e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e1d3e1d3e1d3e1d3c1d1e1e1f0f0f0f0f0f00000e1e1e1e1e1e18393e1e1e1e1e1e1e1e1
e1e1c1d1f0f0f0f0c1d1e1e1e1e1e1e1e1e1e1e18393e1e1f0f0f0f0f0f000000000000000000000000000000000000000000000000000000000000000000000
e1e1e1e1e1e1c0d0e1e1e1e1e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0d3e1d3e1d3e1d3e1c0d0e1e1f0f0f0f0f0f00000e1e1e1e1e1e18292e1e1e1e1e1e1e1e1
e1e1c0d0f0f0f0f0c0d0e1e1e1e1e1e1e1e1e1e18292e1e1f0f0f0f0f0f000000000000000000000000000000000000000000000000000000000000000000000
e1e1e1e1e1e1c1d1e1e1e1e1e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e1e1e1e1e1e1e1e1c1d1e1e1f0f0f0f0f0f00000e1e1e1e1e1e18393e1e1e1e1e1e1e1e1
e1e1c1d1f0f0f0f0c1d1e1e1e1e1e1e1e1e1e1e18393e1e1f0f0f0f0f0f000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0000000000000000000000000101004000000000000000000000000001010080000000000000000001018181000001010000000000000000010100000000010100000000000000000000000000000000000000000000000000000000000000000101000000000000000000000000000001010000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
1e1e1e1e1e1e0c0d1e1e1e1e1e1e1e1e1e1e0c0d0e0e0e0e0c0d1e1e1e1e1e1e1e1e1e1e0c0d1e1e0f0f0f0f0f0f00001e1e1e1e1e1e0c0d1e1e1e1e0e0e0e0e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e0c0d1e1e0f0f0f0f0f0f00000000000000000000000000000000000000000000000000000000000000000000
1e1e1e1e1e1e1c1d1e1e1e1e1e1e1e1e1e1e1c1d0e0e0e0e1c1d1e1e1e1e1e1e1e1e1e1e1c1d1e1e0f0f0f0f0f0f00001e1e1e1e1e1e1c1d1e1e1e1e0e0e0e0e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1c1d1e1e0f0f0f0f0f0f00000000000000000000000000000000000000000000000000000000000000000000
1e1e1e1e1e1e0c0d0c0d0c0d0c0d0c0d0c0d0c0d0e0e0e0e0c0d0c0d0c0d0c0d0c0d0c0d0c0d1e1e0f0f0f0f0f0f00001e1e1e1e1e1e0c0d1e1e1e1e0e0e0e0e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e0c0d1e1e0f0f0f0f0f0f00000000000000000000000000000000000000000000000000000000000000000000
1e1e1e1e1e1e1c1d1c1d1c1d1c1d1c1d1c1d1c1d0e0e0e0e1c1d1c1d1c1d1c1d1c1d1c1d1c1d1e1e0f0f0f0f0f0f00001e1e1e1e1e1e1c1d2a2b2c2d2a2a2a2a2a2b2c2d2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a1c1d1e1e0f0f0f0f0f0f00000000000000000000000000000000000000000000000000000000000000000000
1e1e1e1e1e1e0c0d1e1e1e1e1e1e1e1e1e1e1e1e0e0e0e0e1e1e1e1e1e1e1e1e1e1e1e1e0c0d1e1e0f0f0f0f0f0f00001e1e1e1e1e1e0c0d1e1e1e1e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0c0d1e1e0f0f0f0f0f0f00000000000000000000000000000000000000000000000000000000000000000000
1e1e1e1e1e1e1c1d1e1e1e1e1e1e1e1e1e1e1e1e0e0e0e0e1e1e1e1e1e1e1e1e1e3d1e3d1c1d1e1e0f0f0f0f0f0f00001e1e1e1e1e1e1c1d1e1e1e1e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e1c1d1e1e0f0f0f0f0f0f00000000000000000000000000000000000000000000000000000000000000000000
1e1e1e1e1e1e0c0d1e1e1e1e1e1e1e1e1e1e1e1e0e0e0e0e1e1e1e1e1e1e1e1e3d1e3d1e0c0d1e1e0f0f0f0f0f0f00001e1e1e1e1e1e0c0d1e1e1e1e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0c0d1e1e0f0f0f0f0f0f00000000000000000000000000000000000000000000000000000000000000000000
1e1e1e1e1e1e1c1d1e1e1e1e1e1e1e1e1e1e1e1e0e0e0e0e1e1e1e1e1e1e1e1e1e1e1e1e1c1d1e1e0f0f0f0f0f0f00001e1e1e1e1e1e1c1d1e1e1e1e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e1c1d1e1e0f0f0f0f0f0f00000000000000000000000000000000000000000000000000000000000000000000
1e1e1e1e1e1e0c0d1e1e1e1e1e1e1e1e1e1e28290e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0c0d1e1e0f0f0f0f0f0f00001e1e1e1e1e1e0c0d1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e0f0f0f0f0f0f0f0f0e0e0e0e0c0d1e1e0f0f0f0f0f0f00000000000000000000000000000000000000000000000000000000000000000000
1e1e1e1e1e1e1c1d1e1e1e1e1e1e1e1e1e1e38390e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e1c1d1e1e0f0f0f0f0f0f00001e1e1e1e1e1e1c1d1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e0f0f0f0f0f0f0f0f0e0e0e0e1c1d1e1e0f0f0f0f0f0f00000000000000000000000000000000000000000000000000000000000000000000
1e1e1e1e1e1e0c0d1e1e1e1e1e1e1e1e1e1e28290e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0c0d1e1e0f0f0f0f0f0f00001e1e1e1e1e1e0c0d282928292829282928292829282928290f0f0f0f0f0f0f0f0e0e0e0e0c0d1e1e0f0f0f0f0f0f00000000000000000000000000000000000000000000000000000000000000000000
1e1e1e1e1e1e1c1d2a2a2a2a2a2a2a2a2a2b38392a2a2a2a2a2a2a2a0e0e0e0e0e0e0e0e1c1d1e1e0f0f0f0f0f0f00001e1e1e1e1e1e1c1d383938393839383938393839383938390f0f0f0f0f0f0f0f2a2a2a2a1c1d1e1e0f0f0f0f0f0f00000000000000000000000000000000000000000000000000000000000000000000
1e1e1e1e1e1e28291e1e1e1e1e1e1e1e1e1e28290f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f28291e1e0f0f0f0f0f0f00001e1e1e1e1e1e0c0d1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e0f0f0f0f0f0f0f0f0e0e0e0e0c0d1e1e0f0f0f0f0f0f00000000000000000000000000000000000000000000000000000000000000000000
1e1e1e1e1e1e38391e3d1e3d1e3d1e3d1e1e38390f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f38391e1e0f0f0f0f0f0f00001e1e1e1e1e1e1c1d1e1e1e1e1e1e1e1e1e3d1e3d1e3d1e3d0f0f0f0f0f0f0f0f0e0e0e0e1c1d1e1e0f0f0f0f0f0f00000000000000000000000000000000000000000000000000000000000000000000
1e1e1e1e1e1e28293d1e3d1e3d1e3d1e1e1e28290f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f28291e1e0f0f0f0f0f0f00001e1e1e1e1e1e0c0d1e1e1e1e1e1e1e1e3d1e3d1e3d1e3d1e0f0f0f0f0f0f0f0f0e0e0e0e0c0d1e1e0f0f0f0f0f0f00000000000000000000000000000000000000000000000000000000000000000000
1e1e1e1e1e1e38391e1e1e1e1e1e1e1e1e1e38390f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f38391e1e0f0f0f0f0f0f00001e1e1e1e1e1e1c1d1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e0f0f0f0f0f0f0f0f0e0e0e0e1c1d1e1e0f0f0f0f0f0f00000000000000000000000000000000000000000000000000000000000000000000
1e1e1e1e1e1e28291e1e1e1e1e1e1e1e1e1e28290f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f28291e1e0f0f0f0f0f0f00001e1e1e1e1e1e0c0d0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0c0d1e1e0f0f0f0f0f0f00000000000000000000000000000000000000000000000000000000000000000000
1e1e1e1e1e1e38391e1e1e1e1e1e1e1e1e1e38390f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f38391e1e0f0f0f0f0f0f00001e1e1e1e1e1e1c1d0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e1c1d1e1e0f0f0f0f0f0f00000000000000000000000000000000000000000000000000000000000000000000
1e1e1e1e1e1e28291e1e1e1e1e1e1e1e1e1e28290f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f28291e1e0f0f0f0f0f0f00001e1e1e1e1e1e0c0d0e0e0e0e0e0e0e0e0e0e2e2f0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0c0d1e1e0f0f0f0f0f0f00000000000000000000000000000000000000000000000000000000000000000000
1e1e1e1e1e1e38392a2a2a2a2a2a2a2a2a2b38390f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f38391e1e0f0f0f0f0f0f00001e1e1e1e1e1e1c1d2a2a2a2a0e0e0e0e0e0e3e3f2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a1c1d1e1e0f0f0f0f0f0f00000000000000000000000000000000000000000000000000000000000000000000
1e1e1e1e1e1e28291e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e0e0e0e0e0e0e0e0e0e0e0e0e28291e1e0f0f0f0f0f0f00001e1e1e1e1e1e28291e1e1e1e0f0f0f0f0f0f0f0f0e0e0e0e1e1e1e1e0f0f0f0f0f0f0f0f28291e1e0f0f0f0f0f0f00000000000000000000000000000000000000000000000000000000000000000000
1e1e1e1e1e1e38391e1e1e1e1e3d1e3d1e3d1e3d1e1e1e1e0e0e0e0e0e0e0e0e0e0e0e0e38391e1e0f0f0f0f0f0f00001e1e1e1e1e1e38391e1e1e1e0f0f0f0f0f0f0f0f0e0e0e0e1e1e1e1e0f0f0f0f0f0f0f0f38391e1e0f0f0f0f0f0f00000000000000000000000000000000000000000000000000000000000000000000
1e1e1e1e1e1e28291e1e1e1e3d1e3d1e3d1e3d1e1e1e1e1e0e0e0e0e0e0e0e0e0e0e0e0e28291e1e0f0f0f0f0f0f00001e1e1e1e1e1e28291e1e1e1e0f0f0f0f0f0f0f0f0e0e0e0e1e1e1e1e0f0f0f0f0f0f0f0f28291e1e0f0f0f0f0f0f00000000000000000000000000000000000000000000000000000000000000000000
1e1e1e1e1e1e38391e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e0e0e0e0e0e0e0e0e0e0e0e0e38391e1e0f0f0f0f0f0f00001e1e1e1e1e1e38391e1e1e1e0f0f0f0f0f0f0f0f0e0e0e0e1e1e1e1e0f0f0f0f0f0f0f0f38391e1e0f0f0f0f0f0f00000000000000000000000000000000000000000000000000000000000000000000
1e1e1e1e1e1e28291e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e0e0e0e0e0f0f0f0f0f0f0f0f28291e1e0f0f0f0f0f0f00001e1e1e1e1e1e28290f0f0f0f0f0f0f0f1e1e1e1e0e0e0e0e0f0f0f0f0f0f0f0f1e1e1e1e28291e1e0f0f0f0f0f0f00000000000000000000000000000000000000000000000000000000000000000000
1e1e1e1e1e1e38391e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e0e0e0e0e0f0f0f0f0f0f0f0f38391e1e0f0f0f0f0f0f00001e1e1e1e1e1e38390f0f0f0f0f0f0f0f1e3d1e3d0e0e0e0e0f0f0f0f0f0f0f0f1e3d1e3d38391e1e0f0f0f0f0f0f00000000000000000000000000000000000000000000000000000000000000000000
1e1e1e1e1e1e2829282928291e1e1e1e1e1e1e1e28292829282928290f0f0f0f0f0f0f0f28291e1e0f0f0f0f0f0f00001e1e1e1e1e1e28290f0f0f0f0f0f0f0f3d1e3d1e0e0e0e0e0f0f0f0f0f0f0f0f3d1e3d1e28291e1e0f0f0f0f0f0f00000000000000000000000000000000000000000000000000000000000000000000
1e1e1e1e1e1e3839383938392a2a2a2a2a2a2a2a38393839383938390f0f0f0f0f0f0f0f38391e1e0f0f0f0f0f0f00001e1e1e1e1e1e38390f0f0f0f0f0f0f0f1e1e1e1e0e0e0e0e0f0f0f0f0f0f0f0f1e1e1e1e38391e1e0f0f0f0f0f0f00000000000000000000000000000000000000000000000000000000000000000000
1e1e1e1e1e1e0c0d1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e0e0e0e0e0f0f0f0f0f0f0f0f0c0d1e1e0f0f0f0f0f0f00001e1e1e1e1e1e28290c0d0c0d0c0d0c0d0c0d0c0d0f0f0f0f0c0d0c0d0c0d0c0d0c0d0c0d28291e1e0f0f0f0f0f0f00000000000000000000000000000000000000000000000000000000000000000000
1e1e1e1e1e1e1c1d1e1e1e1e1e1e1e1e1e3d1e3d1e3d1e3d0e0e0e0e0f0f0f0f0f0f0f0f1c1d1e1e0f0f0f0f0f0f00001e1e1e1e1e1e38391c1d1c1d1c1d1c1d1c1d1c1d0f0f0f0f1c1d1c1d1c1d1c1d1c1d1c1d38391e1e0f0f0f0f0f0f00000000000000000000000000000000000000000000000000000000000000000000
1e1e1e1e1e1e0c0d1e1e1e1e1e1e1e1e3d1e3d1e3d1e3d1e0e0e0e0e0f0f0f0f0f0f0f0f0c0d1e1e0f0f0f0f0f0f00001e1e1e1e1e1e28291e1e1e1e1e1e1e1e1e1e0c0d0f0f0f0f0c0d1e1e1e1e1e1e1e1e1e1e28291e1e0f0f0f0f0f0f00000000000000000000000000000000000000000000000000000000000000000000
1e1e1e1e1e1e1c1d1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e0e0e0e0e0f0f0f0f0f0f0f0f1c1d1e1e0f0f0f0f0f0f00001e1e1e1e1e1e38391e1e1e1e1e1e1e1e1e1e1c1d0f0f0f0f1c1d1e1e1e1e1e1e1e1e1e1e38391e1e0f0f0f0f0f0f00000000000000000000000000000000000000000000000000000000000000000000
